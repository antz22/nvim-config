# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet io0 "Template" b
#include <iostream>
using namespace std;

int main() {
	$0
}

endsnippet

snippet io1 "Bits with fastio" b
#include <bits/stdc++.h>
using namespace std;

void solve() {
	$0
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	solve();
}

endsnippet

snippet io2 "Fastio with input file" b
#include <bits/stdc++.h>
using namespace std;

void solve() {
	$2
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	//freopen("${1:NAME}.in", "r", stdin);
	//freopen("$1.out", "w", stdout);

	solve();
}

endsnippet


snippet bits "Template to include bits" b
#include <bits/stdc++.h>
using namespace std;

int main() {
	$0
}
endsnippet

snippet fri "For loop" b
for (int ${1:i}=0; $1<${2:n}; $1++) {
	${4}
}
endsnippet

snippet frmi "Minimal for loop" b
for (int ${1:i}=0; $1<${2:n}; $1++)	${4}
endsnippet
